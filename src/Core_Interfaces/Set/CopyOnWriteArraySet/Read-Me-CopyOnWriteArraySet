✅ Simple Explanation: What is CopyOnWriteArraySet?
|--> CopyOnWriteArraySet is a thread-safe variant of a Set backed by a CopyOnWriteArrayList.
|--> It is part of the java.util.concurrent package and is designed for concurrent read-heavy scenarios. When a
modification (like add/remove) happens, the entire backing array is copied, hence the name.
|--> Ideal for cases where reads vastly outnumber writes, and iteration is frequent and should not be affected by
concurrent modifications.

<<<<<-------------------------------------------------------------------------------------------------------------->>>>>
✅ Features :-

|---▶ Thread-safe without external synchronization — safe for concurrent use.
|---▶ Backed by CopyOnWriteArrayList, not a hash-based or tree-based structure.
|---▶ All mutative operations (add, remove, etc.) make a fresh copy of the underlying array.
|---▶ Read operations (iteration, contains, size) are fast and do not block.
|---▶ Iterators are fail-safe and immutable snapshots — no ConcurrentModificationException.
|---▶ Preserves insertion order.
|---▶ Does not allow duplicates (like all Set implementations).
|---▶ Suitable for applications where reads are frequent and modifications are rare (e.g., caching, listener lists).
|---▶ Implements Serializable and Cloneable.

<<<<<-------------------------------------------------------------------------------------------------------------->>>>>
✅ Explanation of Methods Used in CopyOnWriteArraySet_Demo.java

Method	Description
add(E e)	        |--> Adds element if not already present; duplicates are ignored.
remove(Object o)	|--> Removes the specified element if it exists.
contains(Object o)	|--> Checks if the element is present in the set.
iterator()	        |--> Returns a snapshot iterator — unaffected by changes to the set after creation.
for-each loop	    |--> Safe to use with CopyOnWrite collections — no ConcurrentModificationException.

<<<<<-------------------------------------------------------------------------------------------------------------->>>>>
✅ Some Important Points That Should Be Noted:

|---▶ CopyOnWriteArraySet is best used in read-mostly scenarios — costly to write.
|---▶ Each write (add/remove) causes the entire array to be copied — avoid frequent updates.
|---▶ Iterators reflect the state at the time of their creation (snapshot semantics).
|---▶ No need to manually synchronize — fully thread-safe by design.
|---▶ Does not allow null elements — will throw NullPointerException.
|---▶ More memory-intensive for large sets due to copy-on-write behavior.
|---▶ Suitable for event listeners, caches, pub-sub systems, and thread-safe config lists.
|---▶ Maintains insertion order (since it's array-based, like ArrayList).

<<<<<-------------------------------------------------------------------------------------------------------------->>>>>
