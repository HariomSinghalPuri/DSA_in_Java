Why Use Set in Java? Importance & Key Benefits
In Java, Set is a fundamental Collection interface that stores unique elements (no duplicates) and is widely used for efficient data management. Below are the key reasons why Set is important:

1. Ensures Uniqueness (No Duplicates)
--> Automatically rejects duplicate entries (unlike List).
--> Useful when you need distinct elements (e.g., storing unique user IDs, removing duplicates from a list).

2. Fast Lookup & Search Operations
--> HashSet provides O(1) average-time complexity for add(), remove(), and contains().
--> TreeSet provides O(log n) operations but maintains sorted order.

3. No Index-Based Access (Prevents Unordered Modifications)
--> Unlike List, a Set does not allow access by index (get(i)), making it safer for cases where order doesn’t matter.
--> Exception: LinkedHashSet maintains insertion order.

<<<<<-------------------------------------------------------------------------------------------------------------->>>>>
Hierarchy Diagram of the Set Interface in Java :

Collection (Interface)
│
└── Set (Interface)
    │
    ├── HashSet (Class) → Uses a hash table (unordered, O(1) operations)
    │   └── LinkedHashSet (Class) → Maintains insertion order
    │
    ├── SortedSet (Interface) → Extends Set, provides ordering
    │   └── NavigableSet (Interface) → Extends SortedSet, adds navigation methods
    │       └── TreeSet (Class) → Red-Black Tree implementation (sorted, O(log n))
    │
    ├── EnumSet (Class) → Specialized high-performance Set for enum types
    │
    └── CopyOnWriteArraySet (Class) → Thread-safe, backed by CopyOnWriteArrayList

<<<<<-------------------------------------------------------------------------------------------------------------->>>>>
Key Methods Summary:-

Method	            Description
add(E e)	        |--> Adds an element (ignores duplicates)
contains(Object o)	|--> Checks if an element exists
remove(Object o)	|--> Removes an element
size()	            |--> Returns the number of elements
isEmpty()	        |--> Checks if the Set is empty
clear()	            |--> Removes all elements
iterator()	        |--> Used for iteration (enhanced for loop)

<<<<<-------------------------------------------------------------------------------------------------------------->>>>>

