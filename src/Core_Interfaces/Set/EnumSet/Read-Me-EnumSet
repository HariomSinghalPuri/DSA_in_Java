✅ Simple Explanation: What is EnumSet?
|--> EnumSet is a specialized Set implementation designed exclusively for use with Java enums.
|--> It is a high-performance, memory-efficient, and type-safe set that only works with enum types.
|--> Unlike other Set implementations, EnumSet internally uses bit vectors, making it extremely fast for operations like
add, remove, and contains.
|--> It is part of the java.util package and is not thread-safe by default.

<<<<<-------------------------------------------------------------------------------------------------------------->>>>>
✅ Features :-

|---▶ Works only with enum types (not generic objects).
|---▶ Internally backed by bit vectors → extremely fast and memory-efficient.
|---▶ Maintains elements in the natural order of enum declaration.
|---▶ Supports all standard Set operations like add, remove, contains, retainAll, etc.
|---▶ Cannot contain null — throws NullPointerException.
|---▶ Implements Serializable and Cloneable.
|---▶ Provides factory methods: of(), range(), allOf(), noneOf(), complementOf().
|---▶ Much faster than HashSet or TreeSet when working with enums.
|---▶ Immutable if wrapped via Collections.unmodifiableSet().

<<<<<-------------------------------------------------------------------------------------------------------------->>>>>
✅ Explanation of Methods Used in EnumSet_Demo.java :-

Method	Description
EnumSet.of(...)	                |--> Creates a set with specified enum constants.
add(E e)	                    |--> Adds an enum constant to the set.
noneOf(Class<E> elementType)	|--> Returns an empty set for the enum type.
allOf(Class<E> elementType)	    |--> Returns a set with all constants of the enum.
complementOf(EnumSet<E> s)	    |--> Returns a set containing all elements not in the specified set.
range(E from, E to)	            |--> Returns a set with enum constants in the given range (inclusive).
remove(Object o)	            |--> Removes the given enum constant from the set.
contains(Object o)	            |--> Returns true if the set contains the specified enum constant.

<<<<<-------------------------------------------------------------------------------------------------------------->>>>>
✅ Some Important Points That Should Be Noted:

|---▶ EnumSet is much faster and more compact than other Set implementations (like HashSet) when working with enums.
|---▶ Can only be used with enum types, and will throw ClassCastException otherwise.
|---▶ Internally implemented using a bit vector, which makes operations extremely fast (O(1)).
|---▶ All elements are stored in natural order (as declared in the enum).
|---▶ EnumSet is not synchronized — use Collections.synchronizedSet(EnumSet) for thread-safety.
|---▶ Provides rich factory methods (of(), allOf(), noneOf(), range(), complementOf()) — cleaner than constructors.
|---▶ Cannot hold null values — will throw NullPointerException if you try.
|---▶ You cannot instantiate EnumSet with new — use the static factory methods instead.
|---▶ Great for role-based flags, configuration toggles, state machines, permission sets, etc.
|---▶ If the enum has more than 64 constants, EnumSet uses JumboEnumSet internally instead of RegularEnumSet.

<<<<<-------------------------------------------------------------------------------------------------------------->>>>>
